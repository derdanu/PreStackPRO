{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {   

    "installationCLI": {
      "type" :"string"      
    },
    "roleType" : {
      "type": "string",
      "allowedValues": [
        "client"        
      ],
      "metadata": {
        "description": "The machine number within the cluster"
      }
    },
    "instanceNumber" : {
      "type": "int",    
      "metadata": {
        "description": "The machine number within the cluster"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "openlogic",
      "metadata":   {
        "description": "openlogic is the CentOS Distributor in Azure Market Place"
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "CentOS",
      "metadata": {
        "description": "New CentOS Image Offer"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "7.2",      
      "metadata": {
		  "description": "OpenLogic CentOS version to use **docker usage Only for 7.1/7.2 kernels 3.10 and above **"
	  }
	},
	"adminPassword": {
		"type": "securestring",
		"metadata": {
			"description": "password"
		}
	},
	"mountFolder": {
		"type": "string",
		"defaultValue": "/data",
		"metadata": {
			"description": "The Folder system to be auto-mounted."
		}
	},
	"nodeSize": {
		"type": "string",
		"allowedValues": [
			"Standard_A3",
		"Standard_A4",
		"Standard_A6",
		"Standard_A7",
		"Standard_A8",
		"Standard_A9",
		"Standard_A10",
		"Standard_A11",
		"Standard_D3",
		"Standard_D4",
		"Standard_D12",
		"Standard_D13",
		"Standard_D14",
		"Standard_D3_v2",
		"Standard_D4_v2",
		"Standard_D5_v2",
		"Standard_D12_v2",
		"Standard_D13_v2",
		"Standard_D14_v2",
		"Standard_D15_v2",
		"Standard_DS1",
		"Standard_DS2",
		"Standard_DS3",
		"Standard_DS4",
		"Standard_DS11",
		"Standard_DS12",
		"Standard_DS13",
		"Standard_DS14",
		"Standard_DS3_v2",
		"Standard_DS4_v2",
		"Standard_DS5_v2",
		"Standard_DS12_v2",
		"Standard_DS13_v2",
		"Standard_DS14_v2",
		"Standard_DS15_v2",
		"Standard_F4",
		"Standard_F8",
		"Standard_F16",
		"Standard_F4s",
		"Standard_F8s",
		"Standard_F16s",
		"Standard_G2",
		"Standard_G3",
		"Standard_G4",
		"Standard_G5",
		"Standard_GS2",
		"Standard_GS3",
		"Standard_GS4",
		"Standard_GS5"

	  ],
      "defaultValue": "Standard_DS2",
      "metadata": {
        "description": "Size of the  node."
      }
    },
    "storageType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS"
      ],
      "defaultValue": "Premium_LRS",
      "metadata": {
        "description": "Storage Account Type"
      }
    },
    
    "dataDiskSize": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A MDADM RAID0  is created with all data disks auto-mounted,  that is dataDiskSize * dataDiskCount in size n the Storage ."
      }
    },
    "masterVMName": {
      "type": "string",
      "defaultValue": "beegfs",
      "metadata": {
        "description": "The Name of the VM."
      }
    },
	"numDataDisks": {
		"type": "string",
		"allowedValues": [
			"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"32",
		"64"
			],  
		"metadata": {
			"description": "This parameter allows the user to select the number of disks they want"
		}   
	},
	"sshKey": {
		"type": "string",
		"metadata": {
			"description": "SSH rsa public key file as a string."
		}
	},
  "subnetRef": {
    "type": "string",
    "metadata": {
      "description": "Resource ID of the existing subnet to deploy the scale set into. Should be of the form: /subscriptions/YOUR_SUBSCRIPTION_ID/resourceGroups/YOUR_RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/YOUR_VNET_NAME/subnets/YOUR_SUBNET_NAME"
    }
  }
  },
  "variables": {
    "armApiVersion": "2015-06-15",    
    "machineName": "[concat(parameters('masterVMName'),parameters('roleType') , parameters('instanceNumber'))]", 
    "avSetName":  "[concat('avset-',uniqueString(resourceGroup().id), parameters('roleType')) ]",
    "publicIPAddressType": "Dynamic",
    "diskCaching": "ReadWrite",
    "networkSettings": {
      "virtualNetworkName": "virtualnetwork",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "dse": {
          "name": "dse",
          "prefix": "10.0.0.0/16",
          "vnet": "virtualnetwork"
        }
      }
    },
    "newStorageAccountName": "[concat('s',uniqueString(resourceGroup().id), parameters('roleType'), parameters('instanceNumber'))]",
    "nicName": "[concat(parameters('masterVMName'), parameters('roleType'), parameters('instanceNumber') )]",
    "OSDiskName": "osdisk",
    "vmStorageAccountContainerName": "vhd",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('networkSettings').virtualNetworkName)]",
    "storageAccountType": "[parameters('storageType')]"
  },

  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "apiVersion": "[variables('armApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.0.1.', parameters('instanceNumber') )]",              
              "idleTimeoutInMinutes": 30,
              "subnet": {
                "id": "[parameters('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('machineName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('nodeSize')]"
        },
        "osProfile": {
          "computername": "[variables('machineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword" : "[parameters('adminPassword')]"          
        },
        "storageProfile": {          
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),variables('machineName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('armApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('machineName'), '/Installation')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('machineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",        
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": false,
        "settings": {
          "fileUris": [
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'create_ssh_key.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_psp.sh')]",
			"[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_x2go.sh')]",
			"[concat('https://prestackpro.blob.core.windows.net/psp/',    'ebs_raid0.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'get_beegfs.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_beegfs_client.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_beegfs_mgmtd.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_beegfs_storage.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'setup_beegfs_server.sh')]",
            "[concat('https://prestackpro.blob.core.windows.net/psp/',    'write_etc_hosts.sh')]"
          ],
          "commandToExecute": "[parameters('installationCLI')]"
        }
      }
    }      
  ]
}
